<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app_RTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app_RTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jan 07 20:59:08 2019
<BR><P>
<H3>Maximum Stack Usage =        888 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
nrf_sdh_ble_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ba]">SEGGER_SYSVIEW_Stop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[b2]">SEGGER_SYSVIEW_RecordVoid</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[b5]">SEGGER_SYSVIEW_SendNumModules</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[ae]">SEGGER_SYSVIEW_RecordU32x2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[af]">SEGGER_SYSVIEW_RecordU32</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[b8]">SEGGER_SYSVIEW_Start</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[b3]">SEGGER_SYSVIEW_SendModule</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[a6]">SEGGER_SYSVIEW_GetSysDesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">_SendPacket</a><BR>
 <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[96]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23f]">std_n</a><BR>
 <LI><a href="#[75]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[74]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[6b]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[234]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">BQ25120_init_task_function</a> from app_tasks_list.o(i.BQ25120_init_task_function) referenced from app_tasks_list.o(i.create_tasks)
 <LI><a href="#[3e]">Bio_Impedence_display_task_function</a> from app_tasks_list.o(i.Bio_Impedence_display_task_function) referenced from app_tasks_list.o(i.create_tasks)
 <LI><a href="#[3d]">Bio_Impedence_receive_task_function</a> from app_tasks_list.o(i.Bio_Impedence_receive_task_function) referenced from app_tasks_list.o(i.create_tasks)
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from app_hal_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[30]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from port_cmsis_systick.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from nrf_sdh_freertos.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[5f]">_cbGetTime</a> from segger_sysview_freertos.o(i._cbGetTime) referenced from segger_sysview_freertos.o(.constdata)
 <LI><a href="#[36]">_cbSendSystemDesc</a> from segger_sysview_config_freertos.o(i._cbSendSystemDesc) referenced from segger_sysview_config_freertos.o(i.SEGGER_SYSVIEW_Conf)
 <LI><a href="#[60]">_cbSendTaskList</a> from segger_sysview_freertos.o(i._cbSendTaskList) referenced from segger_sysview_freertos.o(.constdata)
 <LI><a href="#[3a]">advertising_start</a> from app_helper.o(i.advertising_start) referenced from app_helper.o(i.bluetooth_init)
 <LI><a href="#[48]">app_acc_data_handler</a> from app_helper.o(i.app_acc_data_handler) referenced from app_helper.o(i.services_init)
 <LI><a href="#[47]">app_dts_data_handler</a> from app_helper.o(i.app_dts_data_handler) referenced from app_helper.o(i.services_init)
 <LI><a href="#[42]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[38]">app_timer_callback</a> from app_timer_freertos.o(i.app_timer_callback) referenced from app_timer_freertos.o(i.app_timer_create)
 <LI><a href="#[41]">apply_pending_handle</a> from gatt_cache_manager.o(i.apply_pending_handle) referenced from gatt_cache_manager.o(i.gcm_ble_evt_handler)
 <LI><a href="#[63]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from app_helper.o(sdh_ble_observers1)
 <LI><a href="#[6c]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from app_helper.o(sdh_soc_observers1)
 <LI><a href="#[67]">ble_app_acc_on_ble_evt</a> from app_acc_service.o(i.ble_app_acc_on_ble_evt) referenced from app_helper.o(sdh_ble_observers2)
 <LI><a href="#[66]">ble_app_dts_on_ble_evt</a> from app_dts_service.o(i.ble_app_dts_on_ble_evt) referenced from app_helper.o(sdh_ble_observers2)
 <LI><a href="#[61]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[64]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced 2 times from ble_conn_params.o(sdh_ble_observers1)
 <LI><a href="#[69]">ble_evt_handler</a> from app_helper.o(i.ble_evt_handler) referenced from app_helper.o(sdh_ble_observers3)
 <LI><a href="#[3c]">conn_params_error_handler</a> from app_helper.o(i.conn_params_error_handler) referenced from app_helper.o(i.conn_params_init)
 <LI><a href="#[4b]">db_update_pending_handle</a> from gatt_cache_manager.o(i.db_update_pending_handle) referenced from gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[5b]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[2]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[40]">gatt_evt_handler</a> from app_helper.o(i.gatt_evt_handler) referenced from app_helper.o(i.gatt_init)
 <LI><a href="#[4f]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[54]">gcm_pdb_evt_handler</a> from gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[53]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[57]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5e]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[49]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[49]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[32]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[62]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from app_helper.o(sdh_ble_observers1)
 <LI><a href="#[68]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from app_helper.o(sdh_ble_observers2)
 <LI><a href="#[6a]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[6f]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[6b]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[46]">nrf_qwr_error_handler</a> from app_helper.o(i.nrf_qwr_error_handler) referenced from app_helper.o(i.services_init)
 <LI><a href="#[6d]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[6e]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[37]">on_adv_evt</a> from app_helper.o(i.on_adv_evt) referenced from app_helper.o(i.advertising_init)
 <LI><a href="#[3b]">on_conn_params_evt</a> from app_helper.o(i.on_conn_params_evt) referenced from app_helper.o(i.conn_params_init)
 <LI><a href="#[4a]">params_reply_pending_handle</a> from security_manager.o(i.params_reply_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[50]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[1]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[4e]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[51]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[56]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[4c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[44]">prvTaskExitError</a> from port_cmsis.o(i.prvTaskExitError) referenced from port_cmsis.o(i.pxPortInitialiseStack)
 <LI><a href="#[4d]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[59]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5c]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[45]">sc_send_pending_handle</a> from gatt_cache_manager.o(i.sc_send_pending_handle) referenced from gatt_cache_manager.o(i.service_changed_pending_flags_check)
 <LI><a href="#[52]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[55]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[43]">softdevice_task</a> from nrf_sdh_freertos.o(i.softdevice_task) referenced from nrf_sdh_freertos.o(i.nrf_sdh_freertos_init)
 <LI><a href="#[58]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[39]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[5d]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5a]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2fc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2fd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2fe]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ff]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[300]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[301]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f8]"></a>vPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; SEGGER_SYSVIEW_OnTaskStartExec &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_display_task_function
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_freertos_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_evt_len_ext_set
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[214]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[74]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[217]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[75]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[213]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[220]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[21f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[21d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[302]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[21c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[222]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[303]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[304]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteSkipNoLock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>

<P><STRONG><a name="[305]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_SendTaskInfo
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[be]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_AddTask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[cd]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[309]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>BQ25120_init</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, bq25120.o(i.BQ25120_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BQ25120_init &rArr; BQ25120_read_battery_monitor_register &rArr; BQ25120_read_data &rArr; twim_read_data &rArr; app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_read_battery_monitor_register
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_i2c_disable_charging
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_i2c_enable_charging
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[3f]"></a>BQ25120_init_task_function</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_tasks_list.o(i.BQ25120_init_task_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BQ25120_init_task_function &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_on
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_off
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_on
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ27421_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tasks_list.o(i.create_tasks)
</UL>
<P><STRONG><a name="[7e]"></a>BQ25120_read_battery_monitor_register</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bq25120.o(i.BQ25120_read_battery_monitor_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BQ25120_read_battery_monitor_register &rArr; BQ25120_read_data &rArr; twim_read_data &rArr; app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_write_data
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
</UL>

<P><STRONG><a name="[88]"></a>BQ25120_read_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bq25120.o(i.BQ25120_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BQ25120_read_data &rArr; twim_read_data &rArr; app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_read_battery_monitor_register
</UL>

<P><STRONG><a name="[7d]"></a>BQ25120_write_data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bq25120.o(i.BQ25120_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BQ25120_write_data &rArr; twim_write_data &rArr; app_twim_hal_write_data &rArr; app_twim_drv_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_read_battery_monitor_register
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
</UL>

<P><STRONG><a name="[80]"></a>BQ27421_read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bq27421.o(i.BQ27421_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BQ27421_read &rArr; twim_read_data &rArr; app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_write_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[3e]"></a>Bio_Impedence_display_task_function</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_tasks_list.o(i.Bio_Impedence_display_task_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Bio_Impedence_display_task_function &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_ble
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tasks_list.o(i.create_tasks)
</UL>
<P><STRONG><a name="[3d]"></a>Bio_Impedence_receive_task_function</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, app_tasks_list.o(i.Bio_Impedence_receive_task_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Bio_Impedence_receive_task_function &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_get_bioimpedance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tasks_list.o(i.create_tasks)
</UL>
<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_hal_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOTE_IRQHandler &rArr; app_gpiote_hal_clear_pin_event
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_hal_clear_pin_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>HardFault_c_handler</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HardFault_c_handler &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[97]"></a>HardFault_process</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, port_cmsis_systick.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTC1_IRQHandler &rArr; xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, segger_rtt_1.o(i.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Init
</UL>

<P><STRONG><a name="[9f]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, segger_rtt_1.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Init
</UL>

<P><STRONG><a name="[a0]"></a>SEGGER_RTT_ReadNoLock</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, segger_rtt_1.o(i.SEGGER_RTT_ReadNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_ReadNoLock &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[a2]"></a>SEGGER_RTT_WriteSkipNoLock</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, segger_rtt_1.o(i.SEGGER_RTT_WriteSkipNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_WriteSkipNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TrySendOverflowPacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
</UL>

<P><STRONG><a name="[a3]"></a>SEGGER_SYSVIEW_Conf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, segger_sysview_config_freertos.o(i.SEGGER_SYSVIEW_Conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_SYSVIEW_Conf &rArr; SEGGER_SYSVIEW_Init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SetRAMBase
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[a6]"></a>SEGGER_SYSVIEW_GetSysDesc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_GetSysDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_GetSysDesc &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[a4]"></a>SEGGER_SYSVIEW_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_SYSVIEW_Init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Conf
</UL>

<P><STRONG><a name="[a9]"></a>SEGGER_SYSVIEW_OnIdle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_OnIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_SYSVIEW_OnIdle &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[aa]"></a>SEGGER_SYSVIEW_OnTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_OnTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_OnTaskCreate &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[ab]"></a>SEGGER_SYSVIEW_OnTaskStartExec</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_OnTaskStartExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_OnTaskStartExec &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[ac]"></a>SEGGER_SYSVIEW_OnTaskStartReady</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_OnTaskStartReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[ad]"></a>SEGGER_SYSVIEW_RecordSystime</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordSystime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_SYSVIEW_RecordSystime &rArr; SEGGER_SYSVIEW_RecordU32x2 &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[af]"></a>SEGGER_SYSVIEW_RecordU32</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_RecordU32 &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordSystime
</UL>

<P><STRONG><a name="[ae]"></a>SEGGER_SYSVIEW_RecordU32x2</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordU32x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_RecordU32x2 &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordSystime
</UL>

<P><STRONG><a name="[b0]"></a>SEGGER_SYSVIEW_RecordU32x3</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordU32x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SEGGER_SYSVIEW_RecordU32x3 &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[b1]"></a>SEGGER_SYSVIEW_RecordU32x4</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordU32x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SEGGER_SYSVIEW_RecordU32x4 &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b2]"></a>SEGGER_SYSVIEW_RecordVoid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_RecordVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_RecordVoid &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
</UL>

<P><STRONG><a name="[b3]"></a>SEGGER_SYSVIEW_SendModule</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_SendModule &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncodeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[cf]"></a>SEGGER_SYSVIEW_SendModuleDescription</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendModuleDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_SYSVIEW_SendModuleDescription
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[b5]"></a>SEGGER_SYSVIEW_SendNumModules</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendNumModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_SendNumModules &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[b6]"></a>SEGGER_SYSVIEW_SendSysDesc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendSysDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_SendSysDesc &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncodeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbSendSystemDesc
</UL>

<P><STRONG><a name="[b7]"></a>SEGGER_SYSVIEW_SendTaskInfo</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendTaskInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncodeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_SendTaskInfo
</UL>

<P><STRONG><a name="[b9]"></a>SEGGER_SYSVIEW_SendTaskList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SendTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_SYSVIEW_SendTaskList
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[a5]"></a>SEGGER_SYSVIEW_SetRAMBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_SetRAMBase))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Conf
</UL>

<P><STRONG><a name="[2ed]"></a>SEGGER_SYSVIEW_ShrinkId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_ShrinkId))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[b8]"></a>SEGGER_SYSVIEW_Start</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordVoid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskList
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendNumModules
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordSystime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteSkipNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[ba]"></a>SEGGER_SYSVIEW_Stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = SEGGER_SYSVIEW_Stop &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
</UL>

<P><STRONG><a name="[bb]"></a>SEGGER_SYSVIEW_Warn</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, segger_sysview.o(i.SEGGER_SYSVIEW_Warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_SYSVIEW_Warn &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreparePacket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EncodeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_AddTask
</UL>

<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_sdh_freertos.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; xTaskResumeFromISR &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SYSVIEW_AddTask</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, segger_sysview_freertos.o(i.SYSVIEW_AddTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_SendTaskInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Warn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[bf]"></a>SYSVIEW_SendTaskInfo</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, segger_sysview_freertos.o(i.SYSVIEW_SendTaskInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_AddTask
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbSendTaskList
</UL>

<P><STRONG><a name="[cc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_182
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[30c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d3]"></a>addr_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[d6]"></a>ads1292r_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ads1292r.o(i.ads1292r_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ads1292r_enable &rArr; spi_enable_ads1292r &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable_ads1292r
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
</UL>

<P><STRONG><a name="[8e]"></a>ads1292r_get_bioimpedance</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ads1292r.o(i.ads1292r_get_bioimpedance))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ads1292r_get_bioimpedance &rArr; spi_read_byte &rArr; app_spi_hal_read_spi &rArr; app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_receive_task_function
</UL>

<P><STRONG><a name="[d9]"></a>ads1292r_init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ads1292r.o(i.ads1292r_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ads1292r_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_set_register
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_pin_config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_interface_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_send_command
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[db]"></a>ads1292r_interface_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ads1292r.o(i.ads1292r_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ads1292r_interface_init &rArr; spi_init_ads1292r &rArr; app_spi_hal_configure_spi &rArr; app_spi_hal_configure_sclk &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init_ads1292r
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
</UL>

<P><STRONG><a name="[da]"></a>ads1292r_pin_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ads1292r.o(i.ads1292r_pin_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ads1292r_pin_config &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
</UL>

<P><STRONG><a name="[e2]"></a>ads1292r_read_id</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ads1292r.o(i.ads1292r_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ads1292r_read_id &rArr; ads1292r_read_register &rArr; spi_read_byte &rArr; app_spi_hal_read_spi &rArr; app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[dd]"></a>ads1292r_read_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ads1292r.o(i.ads1292r_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ads1292r_read_register &rArr; spi_read_byte &rArr; app_spi_hal_read_spi &rArr; app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_id
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dts_data_handler
</UL>

<P><STRONG><a name="[e3]"></a>ads1292r_ref_voltage_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_pin_configuration.o(i.ads1292r_ref_voltage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ads1292r_ref_voltage_init &rArr; init_ref_vtg_ads1292r &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_ref_vtg_ads1292r
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ref_vtg_ads1292r
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[dc]"></a>ads1292r_send_command</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ads1292r.o(i.ads1292r_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ads1292r_send_command &rArr; spi_write_byte &rArr; app_spi_hal_write_spi &rArr; app_spi_drv_write_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dts_data_handler
</UL>

<P><STRONG><a name="[de]"></a>ads1292r_set_register</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ads1292r.o(i.ads1292r_set_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ads1292r_set_register &rArr; spi_write_byte &rArr; app_spi_hal_write_spi &rArr; app_spi_drv_write_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dts_data_handler
</UL>

<P><STRONG><a name="[3a]"></a>advertising_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_helper.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = advertising_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.bluetooth_init)
</UL>
<P><STRONG><a name="[ec]"></a>ah</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[42]"></a>app_error_fault_handler</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[f1]"></a>app_error_save_and_stop</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[f2]"></a>app_gpio_drv_clear_output_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_drv_gpio.o(i.app_gpio_drv_clear_output_pin))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>

<P><STRONG><a name="[f4]"></a>app_gpio_drv_configure_drive_configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_drv_gpio.o(i.app_gpio_drv_configure_drive_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpio_drv_configure_drive_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_drive_configuration
</UL>

<P><STRONG><a name="[f6]"></a>app_gpio_drv_configure_input_buffer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_drv_gpio.o(i.app_gpio_drv_configure_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpio_drv_configure_input_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_input_buffer
</UL>

<P><STRONG><a name="[f8]"></a>app_gpio_drv_configure_pin_direction</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_drv_gpio.o(i.app_gpio_drv_configure_pin_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpio_drv_configure_pin_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_direction
</UL>

<P><STRONG><a name="[fc]"></a>app_gpio_drv_configure_pin_sensing</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_drv_gpio.o(i.app_gpio_drv_configure_pin_sensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpio_drv_configure_pin_sensing
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_sensing
</UL>

<P><STRONG><a name="[fd]"></a>app_gpio_drv_configure_pull_configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_drv_gpio.o(i.app_gpio_drv_configure_pull_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pull_configuration
</UL>

<P><STRONG><a name="[fe]"></a>app_gpio_drv_set_output_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_drv_gpio.o(i.app_gpio_drv_set_output_pin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>

<P><STRONG><a name="[e1]"></a>app_gpio_hal_clear_output_pin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_clear_output_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable_ads1292r
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_pin_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_on
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_on
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_wireless_charging
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_i2c_enable_charging
</UL>

<P><STRONG><a name="[f3]"></a>app_gpio_hal_configure_drive_configuration</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_drive_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpio_hal_configure_drive_configuration &rArr; app_gpio_drv_configure_drive_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_configure_drive_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
</UL>

<P><STRONG><a name="[f5]"></a>app_gpio_hal_configure_input_buffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpio_hal_configure_input_buffer &rArr; app_gpio_drv_configure_input_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_configure_input_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
</UL>

<P><STRONG><a name="[f7]"></a>app_gpio_hal_configure_pin_direction</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_pin_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpio_hal_configure_pin_direction &rArr; app_gpio_drv_configure_pin_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_configure_pin_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
</UL>

<P><STRONG><a name="[f9]"></a>app_gpio_hal_configure_pin_input</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_pin_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gpio_hal_configure_pin_input &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pull_configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_sensing
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_direction
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_input_buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_drive_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_miso
</UL>

<P><STRONG><a name="[7b]"></a>app_gpio_hal_configure_pin_output</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_pin_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pull_configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_sensing
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_direction
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_input_buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_drive_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_pin_config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wireless_charging
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ref_vtg_ads1292r
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_3V0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_1V8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_sclk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_mosi
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_cs
</UL>

<P><STRONG><a name="[fb]"></a>app_gpio_hal_configure_pin_sensing</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_pin_sensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpio_hal_configure_pin_sensing &rArr; app_gpio_drv_configure_pin_sensing
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_configure_pin_sensing
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
</UL>

<P><STRONG><a name="[fa]"></a>app_gpio_hal_configure_pull_configuration</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_configure_pull_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
</UL>

<P><STRONG><a name="[e0]"></a>app_gpio_hal_set_output_pin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_gpio.o(i.app_gpio_hal_set_output_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_drv_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_interface_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_off
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_ref_vtg_ads1292r
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_3V0
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_1V8
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_i2c_disable_charging
</UL>

<P><STRONG><a name="[ff]"></a>app_gpiote_drv_clear_pin_event</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_drv_gpiote.o(i.app_gpiote_drv_clear_pin_event))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_hal_clear_pin_event
</UL>

<P><STRONG><a name="[90]"></a>app_gpiote_hal_clear_pin_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_hal_gpiote.o(i.app_gpiote_hal_clear_pin_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpiote_hal_clear_pin_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_drv_clear_pin_event
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>app_spi_drv_configure_miso</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_miso))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_miso
</UL>

<P><STRONG><a name="[108]"></a>app_spi_drv_configure_mosi</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_mosi))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_mosi
</UL>

<P><STRONG><a name="[10a]"></a>app_spi_drv_configure_sclk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_sclk))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_sclk
</UL>

<P><STRONG><a name="[110]"></a>app_spi_drv_configure_spi_bit_order</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_spi_bit_order))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_bit_order
</UL>

<P><STRONG><a name="[111]"></a>app_spi_drv_configure_spi_frequency</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_spi_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_frequency
</UL>

<P><STRONG><a name="[112]"></a>app_spi_drv_configure_spi_mode</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_configure_spi_mode))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_mode
</UL>

<P><STRONG><a name="[113]"></a>app_spi_drv_enable_spi_module</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_drv_spi.o(i.app_spi_drv_enable_spi_module))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_enable_spi_module
</UL>

<P><STRONG><a name="[100]"></a>app_spi_drv_read_spi</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_drv_spi.o(i.app_spi_drv_read_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_read_spi
</UL>

<P><STRONG><a name="[103]"></a>app_spi_drv_write_spi</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_drv_spi.o(i.app_spi_drv_write_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_spi_drv_write_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_write_spi
</UL>

<P><STRONG><a name="[104]"></a>app_spi_hal_configure_cs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_hal_spi.o(i.app_spi_hal_configure_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_spi_hal_configure_cs &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[105]"></a>app_spi_hal_configure_miso</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_hal_spi.o(i.app_spi_hal_configure_miso))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_spi_hal_configure_miso &rArr; app_gpio_hal_configure_pin_input &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_input
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_miso
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[107]"></a>app_spi_hal_configure_mosi</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_hal_spi.o(i.app_spi_hal_configure_mosi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_spi_hal_configure_mosi &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[109]"></a>app_spi_hal_configure_sclk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_hal_spi.o(i.app_spi_hal_configure_sclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_spi_hal_configure_sclk &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_sclk
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[10b]"></a>app_spi_hal_configure_spi</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_hal_spi.o(i.app_spi_hal_configure_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_spi_hal_configure_spi &rArr; app_spi_hal_configure_sclk &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_enable_spi_module
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_mode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_frequency
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi_bit_order
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_sclk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_mosi
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_miso
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init_ads1292r
</UL>

<P><STRONG><a name="[10d]"></a>app_spi_hal_configure_spi_bit_order</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_spi.o(i.app_spi_hal_configure_spi_bit_order))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_spi_hal_configure_spi_bit_order
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_spi_bit_order
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[10e]"></a>app_spi_hal_configure_spi_frequency</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_spi.o(i.app_spi_hal_configure_spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_spi_hal_configure_spi_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_spi_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[10c]"></a>app_spi_hal_configure_spi_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_spi.o(i.app_spi_hal_configure_spi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_spi_hal_configure_spi_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_configure_spi_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[10f]"></a>app_spi_hal_enable_spi_module</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_hal_spi.o(i.app_spi_hal_enable_spi_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_spi_hal_enable_spi_module
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_enable_spi_module
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>

<P><STRONG><a name="[114]"></a>app_spi_hal_read_spi</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_spi.o(i.app_spi_hal_read_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = app_spi_hal_read_spi &rArr; app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_read_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[115]"></a>app_spi_hal_write_spi</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_spi.o(i.app_spi_hal_write_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = app_spi_hal_write_spi &rArr; app_spi_drv_write_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_write_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>

<P><STRONG><a name="[117]"></a>app_timer_create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, app_timer_freertos.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_timer_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[2db]"></a>app_timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer_freertos.o(i.app_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[119]"></a>app_timer_start</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, app_timer_freertos.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[11c]"></a>app_timer_stop</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_timer_freertos.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[11e]"></a>app_twim_drv_enable_module</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_drv_twi.o(i.app_twim_drv_enable_module))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_enable_module
</UL>

<P><STRONG><a name="[124]"></a>app_twim_drv_read_data</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, app_drv_twi.o(i.app_twim_drv_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_twim_drv_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_read_data
</UL>

<P><STRONG><a name="[125]"></a>app_twim_drv_set_frequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_drv_twi.o(i.app_twim_drv_set_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_frequency
</UL>

<P><STRONG><a name="[126]"></a>app_twim_drv_set_sclk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_drv_twi.o(i.app_twim_drv_set_sclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_twim_drv_set_sclk
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_sclk
</UL>

<P><STRONG><a name="[127]"></a>app_twim_drv_set_sda</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_drv_twi.o(i.app_twim_drv_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_twim_drv_set_sda
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_sda
</UL>

<P><STRONG><a name="[129]"></a>app_twim_drv_write_data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_drv_twi.o(i.app_twim_drv_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_twim_drv_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_write_data
</UL>

<P><STRONG><a name="[11d]"></a>app_twim_hal_enable_module</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_hal_twi.o(i.app_twim_hal_enable_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_twim_hal_enable_module
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_enable_module
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_init
</UL>

<P><STRONG><a name="[11f]"></a>app_twim_hal_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_hal_twi.o(i.app_twim_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_twim_hal_init &rArr; app_twim_hal_set_sda &rArr; app_twim_drv_set_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_sda
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_sclk
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_set_frequency
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_enable_module
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_init
</UL>

<P><STRONG><a name="[123]"></a>app_twim_hal_read_data</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_hal_twi.o(i.app_twim_hal_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_read_data
</UL>

<P><STRONG><a name="[122]"></a>app_twim_hal_set_frequency</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_hal_twi.o(i.app_twim_hal_set_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_twim_hal_set_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_set_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_init
</UL>

<P><STRONG><a name="[121]"></a>app_twim_hal_set_sclk</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_twi.o(i.app_twim_hal_set_sclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_twim_hal_set_sclk &rArr; app_twim_drv_set_sclk
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_set_sclk
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_init
</UL>

<P><STRONG><a name="[120]"></a>app_twim_hal_set_sda</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_hal_twi.o(i.app_twim_hal_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_twim_hal_set_sda &rArr; app_twim_drv_set_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_set_sda
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_init
</UL>

<P><STRONG><a name="[128]"></a>app_twim_hal_write_data</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_hal_twi.o(i.app_twim_hal_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_twim_hal_write_data &rArr; app_twim_drv_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_drv_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_write_data
</UL>

<P><STRONG><a name="[12a]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[12c]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[140]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_data_send
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[142]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[14b]"></a>ble_advdata_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[14c]"></a>ble_advdata_search</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[ea]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[e9]"></a>ble_advertising_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_is_valid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[63]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[6c]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[eb]"></a>ble_advertising_start</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_high_duty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[158]"></a>ble_app_acc_init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, app_acc_service.o(i.ble_app_acc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_app_acc_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[67]"></a>ble_app_acc_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_acc_service.o(i.ble_app_acc_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_app_acc_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[15d]"></a>ble_app_dts_data_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, app_dts_service.o(i.ble_app_dts_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_app_dts_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_ble
</UL>

<P><STRONG><a name="[15e]"></a>ble_app_dts_init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, app_dts_service.o(i.ble_app_dts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_app_dts_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[66]"></a>ble_app_dts_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_dts_service.o(i.ble_app_dts_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_app_dts_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[164]"></a>ble_conn_params_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[141]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[166]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_encrypted &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[168]"></a>ble_conn_state_for_each_set_user_flag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_for_each_set_user_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[16b]"></a>ble_conn_state_role</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_role &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
</UL>

<P><STRONG><a name="[ee]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>

<P><STRONG><a name="[136]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[165]"></a>ble_conn_state_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[179]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[17f]"></a>bluetooth_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_helper.o(i.bluetooth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = bluetooth_init &rArr; advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_freertos_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_evt_len_ext_set
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[23a]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[185]"></a>conn_evt_len_ext_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_helper.o(i.conn_evt_len_ext_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = conn_evt_len_ext_set &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[18d]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[195]"></a>create_queues</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_queues.o(i.create_queues))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = create_queues &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[197]"></a>create_tasks</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, app_tasks_list.o(i.create_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = create_tasks &rArr; xTaskCreate &rArr; prvAddNewTaskToReadyList &rArr; SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>disable_i2c_enable_charging</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq25120.o(i.disable_i2c_enable_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_i2c_enable_charging &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
</UL>

<P><STRONG><a name="[2ea]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[7c]"></a>enable_i2c_disable_charging</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq25120.o(i.enable_i2c_disable_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enable_i2c_disable_charging &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init
</UL>

<P><STRONG><a name="[1aa]"></a>fds_file_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[1ae]"></a>fds_record_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[1b0]"></a>fds_record_find</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[1b2]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[1b3]"></a>fds_record_find_in_file</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[277]"></a>fds_record_id_from_desc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[1b4]"></a>fds_record_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[1b5]"></a>fds_record_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[1b7]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[1b8]"></a>fds_record_write_reserved</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[1b9]"></a>fds_reserve</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[1bb]"></a>fds_reserve_cancel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fds_reserve_cancel &rArr; write_space_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[102]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_write_spi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_read_spi
</UL>

<P><STRONG><a name="[40]"></a>gatt_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_helper.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.gatt_init)
</UL>
<P><STRONG><a name="[182]"></a>gatt_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_helper.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gatt_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[178]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = gcm_ble_evt_handler &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_written
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[4f]"></a>gcm_im_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gcm_pdb_evt_handler &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[1df]"></a>get_free_connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[1fd]"></a>gpio_nfc_to_gpio_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_pin_configuration.o(i.gpio_nfc_to_gpio_1))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[1d6]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[1e1]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[1e2]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[53]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[2d3]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[1e7]"></a>im_address_resolve</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1e8]"></a>im_ble_addr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[176]"></a>im_ble_evt_handler</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1dc]"></a>im_conn_handle_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[139]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1ed]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
</UL>

<P><STRONG><a name="[1f0]"></a>im_master_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>

<P><STRONG><a name="[1ef]"></a>im_master_ids_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[13a]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = im_new_peer_id &rArr; peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[13e]"></a>im_peer_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[135]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1f3]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1f7]"></a>init_1V8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_pin_configuration.o(i.init_1V8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_1V8 &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_pins_init
</UL>

<P><STRONG><a name="[1f8]"></a>init_3V0</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_pin_configuration.o(i.init_3V0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_3V0 &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_pins_init
</UL>

<P><STRONG><a name="[1fa]"></a>init_modules</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, app_startup.o(i.init_modules))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = init_modules &rArr; bluetooth_init &rArr; advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_send_command
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_id
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Conf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_queues
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_charging_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_pins_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_nfc_to_gpio_1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_ref_voltage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>init_ref_vtg_ads1292r</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_pin_configuration.o(i.init_ref_vtg_ads1292r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_ref_vtg_ads1292r &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_ref_voltage_init
</UL>

<P><STRONG><a name="[202]"></a>init_wireless_charging</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_pin_configuration.o(i.init_wireless_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_wireless_charging &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_charging_init
</UL>

<P><STRONG><a name="[1ee]"></a>is_valid_irk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[83]"></a>led_blue_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_blue_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_blue_off &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[82]"></a>led_green_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_green_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_green_off &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[86]"></a>led_green_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_green_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_green_on &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[200]"></a>led_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_init &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_configure_pin_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[85]"></a>led_red_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_red_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_red_off &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[84]"></a>led_red_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_red_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_red_on &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = main &rArr; init_modules &rArr; bluetooth_init &rArr; advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tasks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[101]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_write_spi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_drv_read_spi
</UL>

<P><STRONG><a name="[1eb]"></a>new_connection</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = new_connection &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[210]"></a>next_id_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[212]"></a>nrf_atfifo_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[1f6]"></a>nrf_atfifo_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1a2]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[215]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[216]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
</UL>

<P><STRONG><a name="[1a3]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[16d]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[167]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>

<P><STRONG><a name="[16c]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[20d]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[20b]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[1f4]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[188]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>

<P><STRONG><a name="[218]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[21e]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[21a]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[21b]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[1a1]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[219]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[221]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_has_next
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[223]"></a>nrf_balloc_alloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[225]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[242]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[1c3]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[1c2]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[62]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[16e]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[68]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; on_rw_authorize_request
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_release
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1cd]"></a>nrf_fstorage_erase</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_page_aligned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1c0]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[6a]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[6f]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[6b]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[1cf]"></a>nrf_fstorage_write</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[92]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 734 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_pushed_str_omit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[96]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tasks
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_queues
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_freertos_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dts_data_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[93]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dts_data_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[81]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[95]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[94]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[f0]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[20a]"></a>nrf_log_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[91]"></a>nrf_log_panic</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[23b]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[241]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[23c]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[240]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[23e]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[23d]"></a>nrf_memobj_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[243]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[17d]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[17e]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sdh_ble_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[246]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[17c]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_sdh_enable_request &rArr; swi_interrupt_priority_workaround &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[24c]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_task
</UL>

<P><STRONG><a name="[186]"></a>nrf_sdh_freertos_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_sdh_freertos.o(i.nrf_sdh_freertos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrf_sdh_freertos_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[1f5]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[238]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; swi_interrupt_priority_workaround &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[244]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[245]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[24f]"></a>nrf_strerror_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[ef]"></a>nrf_strerror_get</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[254]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[256]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[50]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = pdb_pds_evt_handler &rArr; reattempt_previous_operations &rArr; write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_stored
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>pdb_peer_allocate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[25e]"></a>pdb_peer_data_load</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[1dd]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1f2]"></a>pdb_peer_free</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[1e0]"></a>pdb_raw_store</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
</UL>

<P><STRONG><a name="[137]"></a>pdb_write_buf_get</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_acquire
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1e3]"></a>pdb_write_buf_release</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
</UL>

<P><STRONG><a name="[13c]"></a>pdb_write_buf_store</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[26c]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[255]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[257]"></a>pds_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[1ea]"></a>pds_peer_data_iterate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1e9]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[25f]"></a>pds_peer_data_read</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>

<P><STRONG><a name="[262]"></a>pds_peer_data_store</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[25d]"></a>pds_peer_id_allocate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[261]"></a>pds_peer_id_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[263]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[26f]"></a>pds_space_reserve</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[26a]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_space_reserve_cancel &rArr; fds_reserve_cancel &rArr; write_space_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[278]"></a>peer_id_allocate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>

<P><STRONG><a name="[279]"></a>peer_id_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = peer_id_delete &rArr; claim &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[27c]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = peer_id_free &rArr; release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[270]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[271]"></a>peer_id_get_next_used</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[27b]"></a>peer_id_is_allocated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[27f]"></a>peer_id_is_deleted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_deleted &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[266]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[268]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_ptr_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[280]"></a>pm_buffer_release</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[1]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>pm_im_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_im_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>pm_mutex_lock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[18b]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[211]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[19b]"></a>pm_mutex_unlock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[51]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>pm_peer_ranks_get</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[56]"></a>pm_sm_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[2ae]"></a>pvPortMalloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, heap_1.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[116]"></a>pvTimerGetTimerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pvTimerGetTimerID &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_callback
</UL>

<P><STRONG><a name="[29e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port_cmsis.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[8c]"></a>send_data_ble</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_helper.o(i.send_data_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_data_ble &rArr; ble_app_dts_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_display_task_function
</UL>

<P><STRONG><a name="[177]"></a>sm_ble_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[52]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sm_pdb_evt_handler &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>sm_smd_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[2d6]"></a>smd_ble_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[206]"></a>smd_link_secure</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smd_link_secure &rArr; ble_conn_state_role &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[2d8]"></a>smd_params_reply</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[d7]"></a>spi_enable_ads1292r</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(i.spi_enable_ads1292r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_enable_ads1292r &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_enable
</UL>

<P><STRONG><a name="[df]"></a>spi_init_ads1292r</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi.o(i.spi_init_ads1292r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_init_ads1292r &rArr; app_spi_hal_configure_spi &rArr; app_spi_hal_configure_sclk &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_configure_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_interface_init
</UL>

<P><STRONG><a name="[d8]"></a>spi_read_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi.o(i.spi_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_read_byte &rArr; app_spi_hal_read_spi &rArr; app_spi_drv_read_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_read_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_get_bioimpedance
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
</UL>

<P><STRONG><a name="[8d]"></a>spi_write_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi.o(i.spi_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_write_byte &rArr; app_spi_hal_write_spi &rArr; app_spi_drv_write_spi &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_hal_write_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_set_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_receive_task_function
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_send_command
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
</UL>

<P><STRONG><a name="[2dc]"></a>turnon_1V8</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_pin_configuration.o(i.turnon_1V8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turnon_1V8 &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_pins_init
</UL>

<P><STRONG><a name="[2dd]"></a>turnon_3V0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_pin_configuration.o(i.turnon_3V0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turnon_3V0 &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_pins_init
</UL>

<P><STRONG><a name="[e5]"></a>turnon_ref_vtg_ads1292r</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_pin_configuration.o(i.turnon_ref_vtg_ads1292r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turnon_ref_vtg_ads1292r &rArr; app_gpio_hal_set_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_set_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_ref_voltage_init
</UL>

<P><STRONG><a name="[2de]"></a>turnon_wireless_charging</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_pin_configuration.o(i.turnon_wireless_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turnon_wireless_charging &rArr; app_gpio_hal_clear_output_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpio_hal_clear_output_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_charging_init
</UL>

<P><STRONG><a name="[201]"></a>twim_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, twim.o(i.twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = twim_init &rArr; app_twim_hal_init &rArr; app_twim_hal_set_sda &rArr; app_twim_drv_set_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[89]"></a>twim_read_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, twim.o(i.twim_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = twim_read_data &rArr; app_twim_hal_read_data &rArr; app_twim_drv_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ27421_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_read_data
</UL>

<P><STRONG><a name="[8a]"></a>twim_write_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, twim.o(i.twim_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = twim_write_data &rArr; app_twim_hal_write_data &rArr; app_twim_drv_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_twim_hal_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ27421_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_write_data
</UL>

<P><STRONG><a name="[285]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[d2]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(i.uxTaskGetStackHighWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxTaskGetStackHighWaterMark
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbSendTaskList
</UL>

<P><STRONG><a name="[295]"></a>vApplicationIdleHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_tasks_list.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vApplicationIdleHook &rArr; vTaskResume &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[28d]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[29d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[287]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[286]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[289]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[28b]"></a>vPortExitCritical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[294]"></a>vPortFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_1.o(i.vPortFree))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2e7]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[298]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, port_cmsis_systick.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[28e]"></a>vQueueAddToRegistry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueAddToRegistry &rArr; SEGGER_SYSVIEW_RecordU32x2 &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x2
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2a7]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[87]"></a>vTaskDelay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_receive_task_function
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_display_task_function
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ25120_init_task_function
</UL>

<P><STRONG><a name="[2f9]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[2ad]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2ef]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2ee]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordVoid
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2e6]"></a>vTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskResume &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[20e]"></a>vTaskStartScheduler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; prvAddNewTaskToReadyList &rArr; SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ec]"></a>vTaskStepTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskStepTick &rArr; SEGGER_SYSVIEW_RecordU32 &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2d9]"></a>vTaskSuspend</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext &rArr; SEGGER_SYSVIEW_OnTaskStartExec &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_task
</UL>

<P><STRONG><a name="[297]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[72]"></a>vTaskSwitchContext</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskSwitchContext &rArr; SEGGER_SYSVIEW_OnTaskStartExec &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartExec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>voltage_pins_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_pin_configuration.o(i.voltage_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = voltage_pins_init &rArr; init_3V0 &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_3V0
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_1V8
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_3V0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_1V8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[1ff]"></a>wireless_charging_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_pin_configuration.o(i.wireless_charging_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wireless_charging_init &rArr; init_wireless_charging &rArr; app_gpio_hal_configure_pin_output &rArr; app_gpio_hal_configure_pull_configuration &rArr; app_gpio_drv_configure_pull_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnon_wireless_charging
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wireless_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[26b]"></a>write_buf_store</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
</UL>

<P><STRONG><a name="[2f2]"></a>xPortStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, port_cmsis.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[196]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_queues
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[29b]"></a>xQueueGenericReset</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[8f]"></a>xQueueGenericSend</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x4
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_receive_task_function
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[2fb]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x2
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[8b]"></a>xQueueReceive</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x4
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bio_Impedence_display_task_function
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2fa]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[198]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = xTaskCreate &rArr; prvAddNewTaskToReadyList &rArr; SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_tasks
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_freertos_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[9b]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[9a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[d1]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbGetTime
</UL>

<P><STRONG><a name="[9c]"></a>xTaskIncrementTick</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2ac]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[299]"></a>xTaskResumeAll</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[bc]"></a>xTaskResumeFromISR</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskResumeFromISR &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_ShrinkId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>

<P><STRONG><a name="[2f1]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; prvAddNewTaskToReadyList &rArr; SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[11b]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[11a]"></a>xTimerIsTimerActive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTimerIsTimerActive &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fc]"></a>clock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_startup.o(i.clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[1fb]"></a>log_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_startup.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = log_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modules
</UL>

<P><STRONG><a name="[15a]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, app_acc_service.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_acc_on_ble_evt
</UL>

<P><STRONG><a name="[15c]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, app_acc_service.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_acc_on_ble_evt
</UL>

<P><STRONG><a name="[15b]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, app_acc_service.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_acc_on_ble_evt
</UL>

<P><STRONG><a name="[159]"></a>tx_char_add</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, app_acc_service.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_acc_init
</UL>

<P><STRONG><a name="[161]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, app_dts_service.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_on_ble_evt
</UL>

<P><STRONG><a name="[163]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, app_dts_service.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_on_ble_evt
</UL>

<P><STRONG><a name="[162]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, app_dts_service.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_on_ble_evt
</UL>

<P><STRONG><a name="[15f]"></a>rx_char_add</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, app_dts_service.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_init
</UL>

<P><STRONG><a name="[160]"></a>tx_char_add</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, app_dts_service.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_init
</UL>

<P><STRONG><a name="[e8]"></a>advertising_init</STRONG> (Thumb, 106 bytes, Stack size 184 bytes, app_helper.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[48]"></a>app_acc_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_helper.o(i.app_acc_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.services_init)
</UL>
<P><STRONG><a name="[47]"></a>app_dts_data_handler</STRONG> (Thumb, 2206 bytes, Stack size 16 bytes, app_helper.o(i.app_dts_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = app_dts_data_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_set_register
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_send_command
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1292r_read_register
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.services_init)
</UL>
<P><STRONG><a name="[69]"></a>ble_evt_handler</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, app_helper.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[17b]"></a>ble_stack_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_helper.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; swi_interrupt_priority_workaround &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[3c]"></a>conn_params_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_helper.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[184]"></a>conn_params_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, app_helper.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[181]"></a>gap_params_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_helper.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[46]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_helper.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.services_init)
</UL>
<P><STRONG><a name="[37]"></a>on_adv_evt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_helper.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = on_adv_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.advertising_init)
</UL>
<P><STRONG><a name="[3b]"></a>on_conn_params_evt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_helper.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_helper.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[183]"></a>services_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_helper.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = services_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_dts_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_acc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[180]"></a>timers_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_helper.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timers_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
</UL>

<P><STRONG><a name="[2e0]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
</UL>

<P><STRONG><a name="[291]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[292]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[29a]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x3
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2a1]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2a2]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2ab]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2df]"></a>ulPortRaiseBASEPRI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(i.ulPortRaiseBASEPRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[2e2]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[284]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[288]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvAddNewTaskToReadyList &rArr; SYSVIEW_AddTask &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_AddTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[28f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[290]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvDeleteTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[296]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4c]"></a>prvIdleTask</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = prvIdleTask &rArr; vPortSuppressTicksAndSleep &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[29c]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[28a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2f3]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2e5]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.prvTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[2f0]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[2e1]"></a>ulPortRaiseBASEPRI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.ulPortRaiseBASEPRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[28c]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2aa]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[29f]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[2a0]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[2a3]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2a4]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2a6]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2a5]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2a8]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[4d]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2a9]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>

<P><STRONG><a name="[44]"></a>prvTaskExitError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_cmsis.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_cmsis.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2f7]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port_cmsis.o(i.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2c8]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[99]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2eb]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2e8]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2e9]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[2c7]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, port_cmsis_systick.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[12e]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[143]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[18e]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[147]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[144]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[148]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[14a]"></a>name_encode</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[149]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[145]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[12f]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[146]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[2e4]"></a>uuid_list_sized_encode</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[e7]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[e6]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[252]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
</UL>

<P><STRONG><a name="[14d]"></a>config_is_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_advertising.o(i.config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1be]"></a>flags_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[152]"></a>flash_access_in_progress</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_access_in_progress &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[14f]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[150]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[151]"></a>on_terminated</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.on_terminated))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[153]"></a>phy_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[155]"></a>set_adv_mode_directed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[154]"></a>set_adv_mode_directed_high_duty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_high_duty))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[156]"></a>set_adv_mode_fast</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[157]"></a>set_adv_mode_slow</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2d5]"></a>use_whitelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = use_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[2e3]"></a>whitelist_has_entries</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
</UL>

<P><STRONG><a name="[64]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[18f]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[250]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[251]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[172]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[16f]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[170]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[171]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; SEGGER_SYSVIEW_OnTaskStartReady &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[190]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2d2]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params.o(i.send_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[39]"></a>update_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_timeout_handler &rArr; send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[61]"></a>ble_evt_handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[16a]"></a>for_each_set_flag</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ble_conn_state.o(i.for_each_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[174]"></a>record_activate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2bf]"></a>record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[173]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[175]"></a>record_set_disconnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[169]"></a>user_flag_is_acquired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[17a]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[41]"></a>apply_pending_handle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.apply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = apply_pending_handle &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_ble_evt_handler)
</UL>
<P><STRONG><a name="[1d7]"></a>cccd_written</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.cccd_written))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[4b]"></a>db_update_pending_handle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.db_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = db_update_pending_handle &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[1a9]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[130]"></a>local_db_apply_in_evt</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_handle
</UL>

<P><STRONG><a name="[1d8]"></a>local_db_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.local_db_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = local_db_update &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[19a]"></a>local_db_update_in_evt</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
</UL>

<P><STRONG><a name="[45]"></a>sc_send_pending_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.sc_send_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = sc_send_pending_handle &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.service_changed_pending_flags_check)
</UL>
<P><STRONG><a name="[208]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[1da]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = service_changed_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c1]"></a>service_changed_send_in_evt</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
</UL>

<P><STRONG><a name="[1d9]"></a>update_pending_flags_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1e4]"></a>service_changed_pending_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[1ec]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1f1]"></a>peer_id_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, id_manager.o(i.peer_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>

<P><STRONG><a name="[199]"></a>data_length_update</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[227]"></a>link_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[228]"></a>on_connected_evt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[22c]"></a>on_data_length_update_evt</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[22d]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[229]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[22b]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[22a]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[231]"></a>on_rw_authorize_request</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_qwr.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_rw_authorize_request
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[230]"></a>on_user_mem_release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.on_user_mem_release))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[22f]"></a>on_user_mem_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.on_user_mem_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_user_mem_request &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[22e]"></a>user_mem_reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
</UL>

<P><STRONG><a name="[274]"></a>file_id_to_peer_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_to_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[2d1]"></a>pds_evt_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
</UL>

<P><STRONG><a name="[27a]"></a>peer_data_delete_process</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_delete_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[275]"></a>peer_data_find</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[272]"></a>peer_data_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[273]"></a>peer_data_id_to_record_key</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_to_record_key))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[276]"></a>peer_id_to_file_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_id_to_file_id))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[27d]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, peer_data_storage.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_unexpected_error &rArr; pds_evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[25a]"></a>pdb_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[26d]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[269]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[25b]"></a>reattempt_previous_operations</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, peer_database.o(i.reattempt_previous_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = reattempt_previous_operations &rArr; write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[26e]"></a>write_buf_length_words_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[2b8]"></a>write_buf_store_in_event</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, peer_database.o(i.write_buf_store_in_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
</UL>

<P><STRONG><a name="[265]"></a>write_buffer_record_acquire</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_buffer_record_acquire &rArr; write_buffer_record_find_unused &rArr; write_buffer_record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[264]"></a>write_buffer_record_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_buffer_record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>

<P><STRONG><a name="[260]"></a>write_buffer_record_find_next</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>

<P><STRONG><a name="[258]"></a>write_buffer_record_find_stored</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_find_stored))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[2f4]"></a>write_buffer_record_find_unused</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_buffer_record_find_unused &rArr; write_buffer_record_find
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_acquire
</UL>

<P><STRONG><a name="[267]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[259]"></a>write_buffer_record_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[18a]"></a>claim</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = claim &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[27e]"></a>release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[65]"></a>ble_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ble_evt_handler &rArr; sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[281]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
</UL>

<P><STRONG><a name="[282]"></a>rank_vars_update</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rank_vars_update &rArr; pm_peer_ranks_get &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[12d]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[12b]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[209]"></a>lock_by_mask</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
</UL>

<P><STRONG><a name="[ed]"></a>allow_repairing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.allow_repairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = allow_repairing &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[131]"></a>auth_status_failure_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_failure_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = auth_status_failure_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[133]"></a>auth_status_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[134]"></a>auth_status_success_process</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[191]"></a>conn_sec_failure</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, security_dispatcher.o(i.conn_sec_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_sec_failure &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>

<P><STRONG><a name="[192]"></a>conn_sec_update_process</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, security_dispatcher.o(i.conn_sec_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = conn_sec_update_process &rArr; encryption_failure &rArr; conn_sec_failure &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[19f]"></a>disconnect_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = disconnect_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[194]"></a>encryption_failure</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = encryption_failure &rArr; conn_sec_failure &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[13f]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[132]"></a>link_secure_failure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>

<P><STRONG><a name="[2d7]"></a>link_secure_peripheral</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = link_secure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[193]"></a>pairing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pairing &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[207]"></a>pairing_failure</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_created
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[13d]"></a>peer_created</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.peer_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_created &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2c9]"></a>sec_info_request_process</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = sec_info_request_process &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_housekeeping
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2cc]"></a>sec_keyset_fill</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_keyset_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sec_keyset_fill &rArr; pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[2cd]"></a>sec_params_request_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, security_dispatcher.o(i.sec_params_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sec_params_request_process &rArr; sec_proc_start &rArr; sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2cb]"></a>sec_proc_housekeeping</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_proc_housekeeping))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[2ca]"></a>sec_proc_start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sec_proc_start &rArr; sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[2cf]"></a>sec_start_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[13b]"></a>send_config_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_config_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2ce]"></a>send_params_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_params_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_params_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
</UL>

<P><STRONG><a name="[138]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1a6]"></a>events_send_from_err_code</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = events_send_from_err_code &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[1a8]"></a>evt_forward</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, security_manager.o(i.evt_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_forward &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[1a7]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_forward
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
</UL>

<P><STRONG><a name="[1bf]"></a>flags_set_from_err_code</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[203]"></a>link_secure</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = link_secure &rArr; params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
</UL>

<P><STRONG><a name="[49]"></a>link_secure_pending_handle</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, security_manager.o(i.link_secure_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = link_secure_pending_handle &rArr; link_secure &rArr; params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[204]"></a>new_context_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.new_context_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = new_context_get
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[4a]"></a>params_reply_pending_handle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, security_manager.o(i.params_reply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = params_reply_pending_handle &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[205]"></a>params_req_send</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, security_manager.o(i.params_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[2d0]"></a>sec_req_process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, security_manager.o(i.sec_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sec_req_process &rArr; link_secure &rArr; params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[253]"></a>smd_params_reply_perform</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_housekeeping &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_handle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[2c3]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>

<P><STRONG><a name="[2c5]"></a>__sd_nvic_is_app_accessible_priority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_is_app_accessible_priority))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[24d]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[2c2]"></a>sd_nvic_DisableIRQ</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[2c4]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[2c6]"></a>sd_nvic_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
</UL>

<P><STRONG><a name="[247]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[248]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[249]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[24b]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[24a]"></a>swi_interrupt_priority_workaround</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_sdh.o(i.swi_interrupt_priority_workaround))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = swi_interrupt_priority_workaround &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[6d]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 114 bytes, Stack size 544 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[43]"></a>softdevice_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_sdh_freertos.o(i.softdevice_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = softdevice_task &rArr; vTaskSuspend &rArr; vTaskSwitchContext &rArr; SEGGER_SYSVIEW_OnTaskStartExec &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_freertos.o(i.nrf_sdh_freertos_init)
</UL>
<P><STRONG><a name="[6e]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[38]"></a>app_timer_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_timer_freertos.o(i.app_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_callback &rArr; pvTimerGetTimerID &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer_freertos.o(i.app_timer_create)
</UL>
<P><STRONG><a name="[d4]"></a>address_is_valid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[19c]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2b4]"></a>event_prepare</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, fds.o(i.event_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2b5]"></a>event_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[19e]"></a>file_find_and_delete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[2]"></a>fs_event_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[1c4]"></a>gc_execute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1d1]"></a>gc_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1c6]"></a>gc_next_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1c9]"></a>gc_page_erase</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1cc]"></a>gc_page_next</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[1c8]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1c7]"></a>gc_record_find_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1c5]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1ce]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gc_swap_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1d3]"></a>gc_swap_pages</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1ca]"></a>gc_swap_promote</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1cb]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1d2]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1e5]"></a>header_check</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fds.o(i.header_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_jump
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[2ba]"></a>header_has_next</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[1e6]"></a>header_jump</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.header_jump))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>

<P><STRONG><a name="[1f9]"></a>init_execute</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[d5]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[2b9]"></a>page_from_record</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[2f6]"></a>page_has_space</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[2f5]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[1d4]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[1d5]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[1ab]"></a>queue_buf_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1ac]"></a>queue_buf_store</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2af]"></a>queue_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2b0]"></a>queue_has_next</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.queue_has_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_has_next &rArr; nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2b1]"></a>queue_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1c1]"></a>queue_process</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_has_next
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[1ad]"></a>queue_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1b1]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[19d]"></a>record_find_and_delete</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[1af]"></a>record_find_by_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[1d0]"></a>record_find_next</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_jump
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[1bd]"></a>record_header_flag_dirty</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[2bb]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_begin &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2bc]"></a>record_header_write_finalize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_finalize &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2bd]"></a>record_header_write_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_id &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2be]"></a>record_id_new</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.record_id_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = record_id_new &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2c0]"></a>record_write_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fds.o(i.record_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[1b6]"></a>write_enqueue</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[2b3]"></a>write_execute</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = write_execute &rArr; record_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1bc]"></a>write_space_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.write_space_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_space_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1ba]"></a>write_space_reserve</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[226]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[224]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[239]"></a>addr_is_aligned32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[232]"></a>addr_is_page_aligned</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_page_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[233]"></a>addr_is_within_bounds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[5b]"></a>erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>erase_execute</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1a5]"></a>event_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[57]"></a>init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>on_operation_failure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_failure))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[235]"></a>on_operation_success</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_success))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[237]"></a>queue_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2b2]"></a>queue_load_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_load_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load_next &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[234]"></a>queue_process</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[1a4]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[59]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>rmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>uninit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>wmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>write_execute</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[20f]"></a>memobj_op</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
</UL>

<P><STRONG><a name="[24e]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[187]"></a>buf_prealloc</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1a0]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[20c]"></a>invalid_packets_pushed_str_omit</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_pushed_str_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_pushed_str_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[189]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_pushed_str_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[2da]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[23f]"></a>std_n</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>

<P><STRONG><a name="[9e]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt_1.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>

<P><STRONG><a name="[b4]"></a>_EncodeStr</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, segger_sysview.o(i._EncodeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _EncodeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Warn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendSysDesc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendModule
</UL>

<P><STRONG><a name="[ce]"></a>_HandleIncomingPacket</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, segger_sysview.o(i._HandleIncomingPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskList
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendNumModules
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendModuleDescription
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendModule
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordSystime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_GetSysDesc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
</UL>

<P><STRONG><a name="[a7]"></a>_PreparePacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, segger_sysview.o(i._PreparePacket))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordVoid
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartExec
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnIdle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Warn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendSysDesc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendNumModules
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendModule
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_GetSysDesc
</UL>

<P><STRONG><a name="[a8]"></a>_SendPacket</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, segger_sysview.o(i._SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TrySendOverflowPacket
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleIncomingPacket
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteSkipNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32x2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordU32
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_RecordVoid
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartReady
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskStartExec
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnTaskCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_OnIdle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Warn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Stop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendTaskInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendSysDesc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendNumModules
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendModule
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_GetSysDesc
</UL>

<P><STRONG><a name="[d0]"></a>_TrySendOverflowPacket</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, segger_sysview.o(i._TrySendOverflowPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _TrySendOverflowPacket &rArr; SEGGER_RTT_WriteSkipNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteSkipNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendPacket
</UL>

<P><STRONG><a name="[36]"></a>_cbSendSystemDesc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, segger_sysview_config_freertos.o(i._cbSendSystemDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _cbSendSystemDesc &rArr; SEGGER_SYSVIEW_SendSysDesc &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_SYSVIEW_SendSysDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> segger_sysview_config_freertos.o(i.SEGGER_SYSVIEW_Conf)
</UL>
<P><STRONG><a name="[5f]"></a>_cbGetTime</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, segger_sysview_freertos.o(i._cbGetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _cbGetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> segger_sysview_freertos.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>_cbSendTaskList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, segger_sysview_freertos.o(i._cbSendTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _cbSendTaskList &rArr; SYSVIEW_SendTaskInfo &rArr; SEGGER_SYSVIEW_SendTaskInfo &rArr; _SendPacket &rArr; _HandleIncomingPacket &rArr; SEGGER_SYSVIEW_Start &rArr;  _SendPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSVIEW_SendTaskInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> segger_sysview_freertos.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c1]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ca]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c2]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>errata_182</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_182))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c3]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c4]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c5]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c8]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
